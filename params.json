{"body":"jShould is now the JavaScript assertion library for QUnit. jShould enables developers to write unit tests faster by making them easier to read and write, and removing the hassle of constantly writing assertions strings.\r\n\r\n##So, how do I use it?##\r\n\r\nFirst, you need to download jShould and reference it along with QUnit:\r\n\r\n``` html\r\n<script src=\"qunit.js\"></script>\r\n<script src=\"jshould.js\"></script>\r\n```\r\n\r\nNow you can write assertions inside of your QUnit tests using a simple, chainable jShould syntax:\r\n\r\n``` javascript\r\ntest(\"qunit jshould test 1\", function () {\r\n    var num = 3,\r\n        username = 'john_doe';\r\n\r\n    jShould(num).shouldEqual(3);\r\n\r\n    // or use the $$ shorthand\r\n    $$(num).shouldEqual(3);\r\n\r\n    $$(username)\r\n        .shouldNotBeNull()\r\n    \t.shouldBeDefined()\r\n    \t.shouldNotContain('<');\r\n});\r\n```\r\n\r\nAnd that's it. Assertions are created as they normally would be in QUnit.\r\n\r\njShould is even extensible so you can create your own, more complex and reusable assertions:\r\n\r\n``` javascript\r\n$$.extend('shouldBeValidUsername', 'The username should have been valid.', function (username) {\r\n    return username != null && username.indexOf('<') === -1;\r\n});\r\n\r\ntest(\"qunit jshould test 1\", function () {\r\n    var username = 'john_doe';\t\r\n\r\n    $$(username).shouldBeValidUsername();\r\n});\r\n```\r\n\r\n##Documentation##\r\n\r\n__Core__\r\n\r\n``` javascript\r\njShould(value)\r\n```\r\n\r\nDefine a value, variable, or expression to run assertions against.\r\n\r\n``` javascript\r\njShould(3);\r\n```\r\n\r\nCan also be used via shorthand:\r\n\r\n``` javascript\r\n$$(3);\r\n```\r\n\r\n---\r\n\r\n``` javascript\r\n$$.noConflict()\r\n```\r\n\r\nReturn the jShould and $$ variables to their original values.\r\n\r\n``` javascript\r\n$$.noConflict();\r\n```\r\n\r\nReassign to a different name:\r\n\r\n``` javascript\r\nvar Assert = $$.noConflict();\r\n\r\n// EXAMPLE: Now you can use your own name when asserting:\r\nAssert(3).shouldByType('number');\r\n```\r\n\r\n---\r\n\r\n``` javascript\r\n$$.extend(name, message, expression)\r\n```\r\n\r\nExtend jShould with custom assertions.\r\n\r\nname is the method name placed on jShould when extending\r\nmessage is shown in the QUnit test results after the test has executed\r\nexpression is a function which gets passed one argument: the value being asserted.\r\n\r\n``` javascript\r\n// EXAMPLE:\r\n$$.extend('shouldBeValidUsername', 'The username should have been valid.', function (value) {\r\n    return value != null && value.indexOf('<') === -1;\r\n});\r\n\r\n$$('john_doe').shouldBeValidUsername();\r\n```\r\n\r\n__API__\r\n\r\n``` javascript\r\n.shouldEqual(value)\r\n```\r\n\r\nAssertion passes if the assertion context is equal to the value argument.\r\nEquivalent to QUnit's deepEqual.\r\n\r\n``` javascript\r\n// EXAMPLE\r\nvar car = { color: 'green' };\r\n$$(car).shouldEqual({ color: 'green' });\r\n```\r\n\r\n---\r\n\r\n``` javascript\r\n.shouldNotEqual(value)\r\n```\r\n\r\nAssertion passes if the assertion context is not equal to the value argument.\r\nEquivalent to QUnit's notDeepEqual.\r\n\r\n``` javascript\r\n// EXAMPLE\r\nvar car = { color: 'green' };\r\n$$(car).shouldNotEqual({ color: 'red' });\r\n```\r\n\r\n---\r\n\r\n``` javascript\r\n.shouldBeType(type)\r\n```\r\n\r\nAssertion passes if the assertion context's type is equal to the value argument's type.\r\nThese are the same types as those returned from JavaScript's typeof operator.\r\n\r\n``` javascript\r\n// EXAMPLE\r\nvar car = { color: 'green' };\r\n$$(car).shouldBeType('object');\r\n```\r\n---\r\n\r\n``` javascript\r\n.shouldNotBeType(type)\r\n```\r\n\r\nAssertion passes if the assertion context's type is not equal to the value argument's type.\r\nThese are the same types as those returned from JavaScript's typeof operator.\r\n\r\n``` javascript\r\n// EXAMPLE\r\nvar car = { color: 'green' };\r\n$$(car).shouldNotBeType('string');\r\n```\r\n\r\n---\r\n\r\n``` javascript\r\n.shouldContain(value)\r\n```\r\n\r\nAssertion passes if the assertion context contains the value argument. If the context is a string,\r\nthe string is searched for the value. If the context is an array, the array is searched for the value.\r\nIf the context is an object, the object's keys are searched for any matches against the value.\r\n\r\n``` javascript\r\n// EXAMPLE\r\n$$('my name is').shouldContain('name');\r\n$$([0, 10, 20]).shouldContain(10);\r\n$$({ color: 'green' }).shouldContain('color');\r\n```\r\n\r\n---\r\n\r\n``` javascript\r\n.shouldNotContain(value)\r\n```\r\n\r\nAssertion passes if the assertion context does not contains the value argument. If the context\r\nis a string, the string is searched for the value. If the context is an array, the array is searched\r\nfor the value. If the context is an object, the object's keys are searched for any matches against\r\nthe value.\r\n\r\n``` javascript\r\n// EXAMPLE\r\n$$('john_doe').shouldNotContain('; DROP');\r\n$$([0, 10, 20]).shouldNotContain(30);\r\n$$({ color: 'green' }).shouldNotContain('make');\r\n```\r\n---\r\n\r\n``` javascript\r\n.shouldBeNull()\r\n```\r\n\r\nAssertion passes if the assertion context is null.\r\n\r\n``` javascript\r\n// EXAMPLE\r\nvar username = null;\r\n$$(username).shouldBeNull();\r\n```\r\n---\r\n\r\n``` javascript\r\n.shouldNotBeNull()\r\n```\r\n\r\nAssertion passes if the assertion context is not null.\r\n\r\n``` javascript\r\n// EXAMPLE\r\nvar username = 'john_doe';\r\n$$(username).shouldNotBeNull();\r\n```\r\n\r\n---\r\n\r\n``` javascript\r\n.shouldBeEmpty()\r\n```\r\n\r\nAssertion passes if the assertion context is an empty string or array (length 0) or an empty\r\nobject ({}).\r\n\r\n``` javascript\r\n// EXAMPLE\r\n$$('').shouldBeEmpty();\r\n$$([]).shouldBeEmpty();\r\n$$({}).shouldBeEmpty();\r\n```\r\n\r\n---\r\n\r\n``` javascript\r\n.shouldNotBeEmpty()\r\n```\r\n\r\nAssertion passes if the assertion context is not an empty string or array (length greater than 0)\r\nnor an empty object ({}).\r\n\r\n``` javascript\r\n// EXAMPLE\r\n$$('john_doe').shouldNotBeEmpty();\r\n$$([10, 20, 30]).shouldNotBeEmpty();\r\n$$({ color: 'green' }).shouldNotBeEmpty();\r\n```\r\n\r\n---\r\n\r\n``` javascript\r\n.shouldBeUndefined()\r\n```\r\n\r\nAssertion passes if the assertion context is undefined.\r\n\r\n``` javascript\r\n// EXAMPLE\r\nvar username;\r\n$$(username).shouldBeUndefined();\r\n```\r\n\r\n---\r\n\r\n``` javascript\r\n.shouldBeDefined()\r\n```\r\n\r\nAssertion passes if the assertion context is defined (not undefined).\r\n\r\n``` javascript\r\n// EXAMPLE\r\nvar username = 'john_doe';\r\n$$(username).shouldBeDefined();\r\n```\r\n\r\n---\r\n\r\n``` javascript\r\n.shouldBeTrue()\r\n```\r\n\r\nAssertion passes if the assertion context evaluates to true (strict evaluation).\r\n\r\n``` javascript\r\n// EXAMPLE\r\n$$(10 < 100).shouldBeTrue();\r\n$$(!!1).shouldBeTrue();\r\n```\r\n\r\n---\r\n\r\n``` javascript\r\n.shouldBeFalse()\r\n```\r\n\r\nAssertion passes if the assertion context evaluates to false (strict evaluation).\r\n\r\n``` javascript\r\n// EXAMPLE\r\n$$(10 > 100).shouldBeFalse();\r\n$$(!!window.myProp).shouldBeFalse();\r\n```\r\n\r\n---\r\n\r\n``` javascript\r\n.shouldBeLessThan(value)\r\n```\r\n\r\nAssertion passes if the assertion context is less than the value argument.\r\n\r\n``` javascript\r\n// EXAMPLE\r\n$$(10).shouldBeLessThan(100);\r\n```\r\n\r\n---\r\n\r\n``` javascript\r\n.shouldBeMoreThan(num)\r\n```\r\n\r\nAssertion passes if the assertion context is greater than the num argument.\r\n\r\n``` javascript\r\n// EXAMPLE\r\n$$(100).shouldBeMoreThan(10);\r\n```\r\n\r\n---\r\n\r\n``` javascript\r\n.shouldBeLessThan(num)\r\n```\r\n\r\nAssertion passes if the assertion context is less than the num argument.\r\n\r\n``` javascript\r\n// EXAMPLE\r\n$$(10).shouldBeLessThan(100);\r\n```\r\n\r\n---\r\n\r\n``` javascript\r\n.shouldThrowException()\r\n```\r\n\r\nAssertion passes if the assertion context is a function that throws an error.\r\nEquivalent to QUnit's raises.\r\n\r\n``` javascript\r\n// EXAMPLE\r\nvar errorFunc = function() {\r\n    throw new Error('Oh crap.');\r\n};\r\n\r\n$$(errorFunc).shouldThrowException();\r\n```","google":"","tagline":"jShould is a simple, assertion library for QUnit.","note":"Don't delete this file! It's used internally to help with page regeneration.","name":"jShould"}