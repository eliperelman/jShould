/*
jShould v2.0 JavaScript Assertion Library for QUnit
http://eliperelman.com/jshould

Copyright (c) 2011 Eli Perelman
Dual licensed under the MIT or GPL Version 2 licenses.
*/
(function(a){"use strict";var b=a.jShould,c=a.$$,d=function(a,b){return b===(a==null?""+a:{}.toString.call(a).slice(8,-1).toLowerCase())},e=function(a,b){if(d(a,"string"))return a.indexOf(b)!==-1;if(d(a,"array")){if(Array.prototype.indexOf)return a.indexOf(b)!==-1;for(var c=0,e=a.length;c<e;c++)if(a[c]===b)return!0}else if(d(a,"object"))for(var f in a)if(a.hasOwnProperty(f)&&f===b)return!0;return!1},f=function(a){if(!d(a,"object"))return!a.length;for(var b in a)if(a.hasOwnProperty(b))return!1;return!0},g=function(a){if(this instanceof g)this.context=a;else return new g(a)};g.prototype={shouldEqual:function(a){return deepEqual(this.context,a,"The arguments should have been equal."),this},shouldNotEqual:function(a){return notDeepEqual(this.context,a,"The arguments should not have been equal."),this},shouldBeType:function(a){return ok(typeof this.context===a,'The argument should have been of type: "'+a+'".'),this},shouldNotBeType:function(a){return ok(typeof this.context!==a,'The argument should not have been of type: "'+a+'".'),this},shouldContain:function(a){return ok(e(this.context,a),'The argument should have contained "'+a+'".'),this},shouldNotContain:function(a){return ok(!e(this.context,a),'The argument should not have contained "'+a+'".'),this},shouldBeNull:function(){return ok(d(this.context,"null"),"The argument should have been null."),this},shouldNotBeNull:function(){return ok(!d(this.context,"null"),"The argument should have been null."),this},shouldBeEmpty:function(){return ok(f(this.context),"The argument should have been empty."),this},shouldNotBeEmpty:function(){return ok(!f(this.context),"The argument should not have been empty."),this},shouldBeUndefined:function(){return ok(d(this.context,"undefined"),"The argument should have been undefined."),this},shouldBeDefined:function(){return ok(!d(this.context,"undefined"),"The argument should have been defined."),this},shouldBeTrue:function(){return ok(this.context===!0,"The argument should have been true."),this},shouldBeFalse:function(){return ok(this.context===!1,"The argument should have been false."),this},shouldBeLessThan:function(a){return ok(d(this.context,"number")&&this.context<a,"The argument should have been at least "+a+"."),this},shouldBeMoreThan:function(a){return ok(d(this.context,"number")&&this.context>a,"The argument should have been at most "+a+"."),this},shouldThrowException:function(){return raises(this.context,"The argument should have thrown an exception."),this}},g.extend=function(a,b,c){g.prototype[a]=function(){return ok(c(this.context),b),this}},g.noConflict=function(){return a.$$=c,a.jShould=b,g},a.$$=a.jShould=g})(this)